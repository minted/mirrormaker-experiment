[2020-01-31 12:03:15,485] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-01-31 12:03:15,486] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-01-31 12:03:15,486] DEBUG [Controller id=2] Preferred replicas by broker Map() (kafka.controller.KafkaController)
[2020-01-31 12:06:51,808] DEBUG preRegister called. Server=com.sun.jmx.mbeanserver.JmxMBeanServer@66d3c617, name=log4j:logger=kafka.controller (kafka.controller)
[2020-01-31 12:08:04,111] INFO [ControllerEventThread controllerId=2] Shutting down (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-01-31 12:08:04,111] INFO [ControllerEventThread controllerId=2] Stopped (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-01-31 12:08:04,111] INFO [ControllerEventThread controllerId=2] Shutdown completed (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-01-31 12:08:04,111] DEBUG [Controller id=2] Resigning (kafka.controller.KafkaController)
[2020-01-31 12:08:04,111] DEBUG [Controller id=2] Unregister BrokerModifications handler for Set(2) (kafka.controller.KafkaController)
[2020-01-31 12:08:04,111] INFO [PartitionStateMachine controllerId=2] Stopped partition state machine (kafka.controller.ZkPartitionStateMachine)
[2020-01-31 12:08:04,111] INFO [ReplicaStateMachine controllerId=2] Stopped replica state machine (kafka.controller.ZkReplicaStateMachine)
[2020-01-31 12:08:04,112] INFO [RequestSendThread controllerId=2] Shutting down (kafka.controller.RequestSendThread)
[2020-01-31 12:08:04,112] INFO [RequestSendThread controllerId=2] Stopped (kafka.controller.RequestSendThread)
[2020-01-31 12:08:04,112] INFO [RequestSendThread controllerId=2] Shutdown completed (kafka.controller.RequestSendThread)
[2020-01-31 12:08:04,113] INFO [Controller id=2] Resigned (kafka.controller.KafkaController)
[2020-01-31 12:10:33,608] INFO [ControllerEventThread controllerId=2] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-01-31 12:10:33,627] INFO [Controller id=2] 2 successfully elected as the controller. Epoch incremented to 4 and epoch zk version is now 4 (kafka.controller.KafkaController)
[2020-01-31 12:10:33,627] INFO [Controller id=2] Registering handlers (kafka.controller.KafkaController)
[2020-01-31 12:10:33,630] INFO [Controller id=2] Deleting log dir event notifications (kafka.controller.KafkaController)
[2020-01-31 12:10:33,634] INFO [Controller id=2] Deleting isr change notifications (kafka.controller.KafkaController)
[2020-01-31 12:10:33,636] INFO [Controller id=2] Initializing controller context (kafka.controller.KafkaController)
[2020-01-31 12:10:33,654] INFO [Controller id=2] Initialized broker epochs cache: Map(2 -> 69) (kafka.controller.KafkaController)
[2020-01-31 12:10:33,660] DEBUG [Controller id=2] Register BrokerModifications handler for Set(2) (kafka.controller.KafkaController)
[2020-01-31 12:10:33,666] DEBUG [Channel manager on controller 2]: Controller 2 trying to connect to broker 2 (kafka.controller.ControllerChannelManager)
[2020-01-31 12:10:33,677] INFO [RequestSendThread controllerId=2] Starting (kafka.controller.RequestSendThread)
[2020-01-31 12:10:33,677] INFO [Controller id=2] Currently active brokers in the cluster: Set(2) (kafka.controller.KafkaController)
[2020-01-31 12:10:33,677] INFO [Controller id=2] Currently shutting brokers in the cluster: Set() (kafka.controller.KafkaController)
[2020-01-31 12:10:33,678] INFO [Controller id=2] Current list of topics in the cluster: Set() (kafka.controller.KafkaController)
[2020-01-31 12:10:33,678] INFO [Controller id=2] Fetching topic deletions in progress (kafka.controller.KafkaController)
[2020-01-31 12:10:33,682] INFO [Controller id=2] List of topics to be deleted:  (kafka.controller.KafkaController)
[2020-01-31 12:10:33,683] INFO [Controller id=2] List of topics ineligible for deletion:  (kafka.controller.KafkaController)
[2020-01-31 12:10:33,684] INFO [Controller id=2] Initializing topic deletion manager (kafka.controller.KafkaController)
[2020-01-31 12:10:33,684] INFO [Topic Deletion Manager 2] Initializing manager with initial deletions: Set(), initial ineligible deletions: Set() (kafka.controller.TopicDeletionManager)
[2020-01-31 12:10:33,685] INFO [Controller id=2] Sending update metadata request (kafka.controller.KafkaController)
[2020-01-31 12:10:33,696] INFO [ReplicaStateMachine controllerId=2] Initializing replica state (kafka.controller.ZkReplicaStateMachine)
[2020-01-31 12:10:33,697] INFO [ReplicaStateMachine controllerId=2] Triggering online replica state changes (kafka.controller.ZkReplicaStateMachine)
[2020-01-31 12:10:33,702] INFO [ReplicaStateMachine controllerId=2] Triggering offline replica state changes (kafka.controller.ZkReplicaStateMachine)
[2020-01-31 12:10:33,703] DEBUG [ReplicaStateMachine controllerId=2] Started replica state machine with initial state -> Map() (kafka.controller.ZkReplicaStateMachine)
[2020-01-31 12:10:33,703] INFO [PartitionStateMachine controllerId=2] Initializing partition state (kafka.controller.ZkPartitionStateMachine)
[2020-01-31 12:10:33,704] INFO [PartitionStateMachine controllerId=2] Triggering online partition state changes (kafka.controller.ZkPartitionStateMachine)
[2020-01-31 12:10:33,706] INFO [RequestSendThread controllerId=2] Controller 2 connected to 10.1.7.190:9092 (id: 2 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-01-31 12:10:33,708] DEBUG [PartitionStateMachine controllerId=2] Started partition state machine with initial state -> Map() (kafka.controller.ZkPartitionStateMachine)
[2020-01-31 12:10:33,709] INFO [Controller id=2] Ready to serve as the new controller with epoch 4 (kafka.controller.KafkaController)
[2020-01-31 12:10:33,713] INFO [Controller id=2] Partitions undergoing preferred replica election:  (kafka.controller.KafkaController)
[2020-01-31 12:10:33,713] INFO [Controller id=2] Partitions that completed preferred replica election:  (kafka.controller.KafkaController)
[2020-01-31 12:10:33,714] INFO [Controller id=2] Skipping preferred replica election for partitions due to topic deletion:  (kafka.controller.KafkaController)
[2020-01-31 12:10:33,714] INFO [Controller id=2] Resuming preferred replica election for partitions:  (kafka.controller.KafkaController)
[2020-01-31 12:10:33,715] INFO [Controller id=2] Starting replica leader election (PREFERRED) for partitions  triggered by ZkTriggered (kafka.controller.KafkaController)
[2020-01-31 12:10:33,727] INFO [Controller id=2] Starting the controller scheduler (kafka.controller.KafkaController)
[2020-01-31 12:10:34,513] INFO [Controller id=2] New topics: [Set(testing0001)], deleted topics: [Set()], new partition replica assignment [Map(testing0001-0 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-01-31 12:10:34,513] INFO [Controller id=2] New partition creation callback for testing0001-0 (kafka.controller.KafkaController)
[2020-01-31 12:10:38,731] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-01-31 12:10:38,732] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-01-31 12:10:38,734] DEBUG [Controller id=2] Preferred replicas by broker Map(2 -> Map(testing0001-0 -> Vector(2))) (kafka.controller.KafkaController)
[2020-01-31 12:10:38,735] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 Map() (kafka.controller.KafkaController)
[2020-01-31 12:10:38,736] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2020-01-31 12:15:38,748] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-01-31 12:15:38,749] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-01-31 12:15:38,749] DEBUG [Controller id=2] Preferred replicas by broker Map(2 -> Map(testing0001-0 -> Vector(2))) (kafka.controller.KafkaController)
[2020-01-31 12:15:38,749] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 Map() (kafka.controller.KafkaController)
[2020-01-31 12:15:38,749] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2020-01-31 12:20:38,761] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-01-31 12:20:38,761] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-01-31 12:20:38,761] DEBUG [Controller id=2] Preferred replicas by broker Map(2 -> Map(testing0001-0 -> Vector(2))) (kafka.controller.KafkaController)
[2020-01-31 12:20:38,761] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 Map() (kafka.controller.KafkaController)
[2020-01-31 12:20:38,762] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2020-01-31 12:23:36,505] INFO [Controller id=2] New topics: [Set(__consumer_offsets)], deleted topics: [Set()], new partition replica assignment [Map(__consumer_offsets-22 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-30 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-8 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-21 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-4 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-27 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-7 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-9 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-46 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-25 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-35 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-41 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-33 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-23 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-49 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-47 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-16 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-28 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-31 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-36 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-42 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-3 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-18 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-37 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-15 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-24 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-38 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-17 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-48 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-19 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-11 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-13 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-2 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-43 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-6 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-14 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-20 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-0 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-44 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-39 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-12 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-45 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-1 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-5 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-26 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-29 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-34 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-10 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-32 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-40 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-01-31 12:23:36,505] INFO [Controller id=2] New partition creation callback for __consumer_offsets-22,__consumer_offsets-30,__consumer_offsets-8,__consumer_offsets-21,__consumer_offsets-4,__consumer_offsets-27,__consumer_offsets-7,__consumer_offsets-9,__consumer_offsets-46,__consumer_offsets-25,__consumer_offsets-35,__consumer_offsets-41,__consumer_offsets-33,__consumer_offsets-23,__consumer_offsets-49,__consumer_offsets-47,__consumer_offsets-16,__consumer_offsets-28,__consumer_offsets-31,__consumer_offsets-36,__consumer_offsets-42,__consumer_offsets-3,__consumer_offsets-18,__consumer_offsets-37,__consumer_offsets-15,__consumer_offsets-24,__consumer_offsets-38,__consumer_offsets-17,__consumer_offsets-48,__consumer_offsets-19,__consumer_offsets-11,__consumer_offsets-13,__consumer_offsets-2,__consumer_offsets-43,__consumer_offsets-6,__consumer_offsets-14,__consumer_offsets-20,__consumer_offsets-0,__consumer_offsets-44,__consumer_offsets-39,__consumer_offsets-12,__consumer_offsets-45,__consumer_offsets-1,__consumer_offsets-5,__consumer_offsets-26,__consumer_offsets-29,__consumer_offsets-34,__consumer_offsets-10,__consumer_offsets-32,__consumer_offsets-40 (kafka.controller.KafkaController)
[2020-01-31 12:23:36,565] INFO [RequestSendThread controllerId=2] Controller 2 connected to 10.1.7.190:9092 (id: 2 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-01-31 12:25:38,771] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-01-31 12:25:38,771] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-01-31 12:25:38,773] DEBUG [Controller id=2] Preferred replicas by broker Map(2 -> Map(__consumer_offsets-22 -> Vector(2), __consumer_offsets-30 -> Vector(2), __consumer_offsets-8 -> Vector(2), __consumer_offsets-21 -> Vector(2), __consumer_offsets-4 -> Vector(2), __consumer_offsets-27 -> Vector(2), __consumer_offsets-7 -> Vector(2), __consumer_offsets-9 -> Vector(2), __consumer_offsets-46 -> Vector(2), __consumer_offsets-25 -> Vector(2), __consumer_offsets-35 -> Vector(2), __consumer_offsets-41 -> Vector(2), __consumer_offsets-33 -> Vector(2), __consumer_offsets-23 -> Vector(2), __consumer_offsets-49 -> Vector(2), __consumer_offsets-47 -> Vector(2), __consumer_offsets-16 -> Vector(2), __consumer_offsets-28 -> Vector(2), __consumer_offsets-31 -> Vector(2), __consumer_offsets-36 -> Vector(2), __consumer_offsets-42 -> Vector(2), __consumer_offsets-3 -> Vector(2), __consumer_offsets-18 -> Vector(2), __consumer_offsets-37 -> Vector(2), __consumer_offsets-15 -> Vector(2), __consumer_offsets-24 -> Vector(2), testing0001-0 -> Vector(2), __consumer_offsets-38 -> Vector(2), __consumer_offsets-17 -> Vector(2), __consumer_offsets-48 -> Vector(2), __consumer_offsets-19 -> Vector(2), __consumer_offsets-11 -> Vector(2), __consumer_offsets-13 -> Vector(2), __consumer_offsets-2 -> Vector(2), __consumer_offsets-43 -> Vector(2), __consumer_offsets-6 -> Vector(2), __consumer_offsets-14 -> Vector(2), __consumer_offsets-20 -> Vector(2), __consumer_offsets-0 -> Vector(2), __consumer_offsets-44 -> Vector(2), __consumer_offsets-39 -> Vector(2), __consumer_offsets-12 -> Vector(2), __consumer_offsets-45 -> Vector(2), __consumer_offsets-1 -> Vector(2), __consumer_offsets-5 -> Vector(2), __consumer_offsets-26 -> Vector(2), __consumer_offsets-29 -> Vector(2), __consumer_offsets-34 -> Vector(2), __consumer_offsets-10 -> Vector(2), __consumer_offsets-32 -> Vector(2), __consumer_offsets-40 -> Vector(2))) (kafka.controller.KafkaController)
[2020-01-31 12:25:38,774] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 Map() (kafka.controller.KafkaController)
[2020-01-31 12:25:38,774] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2020-01-31 12:27:34,463] INFO [Controller id=2] Shutting down broker 2 (kafka.controller.KafkaController)
[2020-01-31 12:27:34,463] DEBUG [Controller id=2] All shutting down brokers: 2 (kafka.controller.KafkaController)
[2020-01-31 12:27:34,463] DEBUG [Controller id=2] Live brokers:  (kafka.controller.KafkaController)
[2020-01-31 12:27:34,467] TRACE [Controller id=2] All leaders = __consumer_offsets-49 -> (Leader:2,ISR:2,LeaderEpoch:0,ControllerEpoch:4),__consumer_offsets-38 -> (Leader:2,ISR:2,LeaderEpoch:0,ControllerEpoch:4),__consumer_offsets-16 -> (Leader:2,ISR:2,LeaderEpoch:0,ControllerEpoch:4),__consumer_offsets-27 -> (Leader:2,ISR:2,LeaderEpoch:0,ControllerEpoch:4),__consumer_offsets-8 -> (Leader:2,ISR:2,LeaderEpoch:0,ControllerEpoch:4),__consumer_offsets-19 -> (Leader:2,ISR:2,LeaderEpoch:0,ControllerEpoch:4),__consumer_offsets-13 -> (Leader:2,ISR:2,LeaderEpoch:0,ControllerEpoch:4),__consumer_offsets-2 -> (Leader:2,ISR:2,LeaderEpoch:0,ControllerEpoch:4),__consumer_offsets-46 -> (Leader:2,ISR:2,LeaderEpoch:0,ControllerEpoch:4),__consumer_offsets-35 -> (Leader:2,ISR:2,LeaderEpoch:0,ControllerEpoch:4),__consumer_offsets-24 -> (Leader:2,ISR:2,LeaderEpoch:0,ControllerEpoch:4),__consumer_offsets-5 -> (Leader:2,ISR:2,LeaderEpoch:0,ControllerEpoch:4),__consumer_offsets-43 -> (Leader:2,ISR:2,LeaderEpoch:0,ControllerEpoch:4),__consumer_offsets-32 -> (Leader:2,ISR:2,LeaderEpoch:0,ControllerEpoch:4),__consumer_offsets-21 -> (Leader:2,ISR:2,LeaderEpoch:0,ControllerEpoch:4),__consumer_offsets-10 -> (Leader:2,ISR:2,LeaderEpoch:0,ControllerEpoch:4),__consumer_offsets-37 -> (Leader:2,ISR:2,LeaderEpoch:0,ControllerEpoch:4),__consumer_offsets-48 -> (Leader:2,ISR:2,LeaderEpoch:0,ControllerEpoch:4),__consumer_offsets-40 -> (Leader:2,ISR:2,LeaderEpoch:0,ControllerEpoch:4),__consumer_offsets-18 -> (Leader:2,ISR:2,LeaderEpoch:0,ControllerEpoch:4),__consumer_offsets-29 -> (Leader:2,ISR:2,LeaderEpoch:0,ControllerEpoch:4),testing0001-0 -> (Leader:2,ISR:2,LeaderEpoch:0,ControllerEpoch:4),__consumer_offsets-7 -> (Leader:2,ISR:2,LeaderEpoch:0,ControllerEpoch:4),__consumer_offsets-23 -> (Leader:2,ISR:2,LeaderEpoch:0,ControllerEpoch:4),__consumer_offsets-45 -> (Leader:2,ISR:2,LeaderEpoch:0,ControllerEpoch:4),__consumer_offsets-34 -> (Leader:2,ISR:2,LeaderEpoch:0,ControllerEpoch:4),__consumer_offsets-26 -> (Leader:2,ISR:2,LeaderEpoch:0,ControllerEpoch:4),__consumer_offsets-4 -> (Leader:2,ISR:2,LeaderEpoch:0,ControllerEpoch:4),__consumer_offsets-15 -> (Leader:2,ISR:2,LeaderEpoch:0,ControllerEpoch:4),__consumer_offsets-42 -> (Leader:2,ISR:2,LeaderEpoch:0,ControllerEpoch:4),__consumer_offsets-31 -> (Leader:2,ISR:2,LeaderEpoch:0,ControllerEpoch:4),__consumer_offsets-9 -> (Leader:2,ISR:2,LeaderEpoch:0,ControllerEpoch:4),__consumer_offsets-20 -> (Leader:2,ISR:2,LeaderEpoch:0,ControllerEpoch:4),__consumer_offsets-12 -> (Leader:2,ISR:2,LeaderEpoch:0,ControllerEpoch:4),__consumer_offsets-1 -> (Leader:2,ISR:2,LeaderEpoch:0,ControllerEpoch:4),__consumer_offsets-28 -> (Leader:2,ISR:2,LeaderEpoch:0,ControllerEpoch:4),__consumer_offsets-17 -> (Leader:2,ISR:2,LeaderEpoch:0,ControllerEpoch:4),__consumer_offsets-6 -> (Leader:2,ISR:2,LeaderEpoch:0,ControllerEpoch:4),__consumer_offsets-39 -> (Leader:2,ISR:2,LeaderEpoch:0,ControllerEpoch:4),__consumer_offsets-44 -> (Leader:2,ISR:2,LeaderEpoch:0,ControllerEpoch:4),__consumer_offsets-36 -> (Leader:2,ISR:2,LeaderEpoch:0,ControllerEpoch:4),__consumer_offsets-47 -> (Leader:2,ISR:2,LeaderEpoch:0,ControllerEpoch:4),__consumer_offsets-3 -> (Leader:2,ISR:2,LeaderEpoch:0,ControllerEpoch:4),__consumer_offsets-25 -> (Leader:2,ISR:2,LeaderEpoch:0,ControllerEpoch:4),__consumer_offsets-14 -> (Leader:2,ISR:2,LeaderEpoch:0,ControllerEpoch:4),__consumer_offsets-30 -> (Leader:2,ISR:2,LeaderEpoch:0,ControllerEpoch:4),__consumer_offsets-41 -> (Leader:2,ISR:2,LeaderEpoch:0,ControllerEpoch:4),__consumer_offsets-33 -> (Leader:2,ISR:2,LeaderEpoch:0,ControllerEpoch:4),__consumer_offsets-22 -> (Leader:2,ISR:2,LeaderEpoch:0,ControllerEpoch:4),__consumer_offsets-11 -> (Leader:2,ISR:2,LeaderEpoch:0,ControllerEpoch:4),__consumer_offsets-0 -> (Leader:2,ISR:2,LeaderEpoch:0,ControllerEpoch:4) (kafka.controller.KafkaController)
[2020-01-31 12:27:35,344] INFO [ControllerEventThread controllerId=2] Shutting down (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-01-31 12:27:35,345] INFO [ControllerEventThread controllerId=2] Stopped (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-01-31 12:27:35,345] INFO [ControllerEventThread controllerId=2] Shutdown completed (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-01-31 12:27:35,346] DEBUG [Controller id=2] Resigning (kafka.controller.KafkaController)
[2020-01-31 12:27:35,346] DEBUG [Controller id=2] Unregister BrokerModifications handler for Set(2) (kafka.controller.KafkaController)
[2020-01-31 12:27:35,348] INFO [PartitionStateMachine controllerId=2] Stopped partition state machine (kafka.controller.ZkPartitionStateMachine)
[2020-01-31 12:27:35,348] INFO [ReplicaStateMachine controllerId=2] Stopped replica state machine (kafka.controller.ZkReplicaStateMachine)
[2020-01-31 12:27:35,349] INFO [RequestSendThread controllerId=2] Shutting down (kafka.controller.RequestSendThread)
[2020-01-31 12:27:35,349] INFO [RequestSendThread controllerId=2] Stopped (kafka.controller.RequestSendThread)
[2020-01-31 12:27:35,349] INFO [RequestSendThread controllerId=2] Shutdown completed (kafka.controller.RequestSendThread)
[2020-01-31 12:27:35,350] INFO [Controller id=2] Resigned (kafka.controller.KafkaController)
